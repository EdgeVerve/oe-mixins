{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "`OEDataMaskMixin`\nThis is the Mixin used to mask parts of data in the display of oe-ui components",
      "summary": "",
      "path": "data-mask-mixin.js",
      "properties": [
        {
          "name": "maskPattern",
          "type": "string | null | undefined",
          "description": "RegExp to choose the substring(s) to be masked",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "maskPatternFlag",
          "type": "string | null | undefined",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "maskChar",
          "type": "string | null | undefined",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"X\""
        },
        {
          "name": "maskString",
          "type": "string | null | undefined",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "appendCharLength",
          "type": "number | null | undefined",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "_replacer",
          "description": "Return a replaced masked string based on the match.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "match",
              "type": "Object"
            }
          ],
          "return": {
            "type": "string",
            "desc": "replaced string with maskChar"
          }
        },
        {
          "name": "_maskDisplay",
          "description": "Sets the 'display' after masking the formatted string with the 'maskChar'.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formattedDisplay",
              "type": "string",
              "description": "formatted string to be masked"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "DataMaskMixin",
      "attributes": [
        {
          "name": "mask-pattern",
          "description": "RegExp to choose the substring(s) to be masked",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 8
            },
            "end": {
              "line": 28,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "mask-pattern-flag",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "mask-char",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "mask-string",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "append-char-length",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEDateMixin`\nThis is the Mixin that takes care of default validation of oe-ui input components",
      "summary": "",
      "path": "oe-date-mixin.js",
      "properties": [
        {
          "name": "value",
          "type": "Date | null | undefined",
          "description": "Property to be binded for the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "Date"
            }
          }
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "String to specify the format in which the data needs to be displayed in the input.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 16
            },
            "end": {
              "line": 43,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_formattingChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"DD MMM YYYY\""
        }
      ],
      "methods": [
        {
          "name": "_formattingChanged",
          "description": "Observer on 'format' property to update the display based on the format.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 55,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newFormat",
              "type": "string"
            },
            {
              "name": "oldFormat",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_parseShorthand",
          "description": "Converts the user shortHand inputs to Date values.\ncomputes values for 'today' , 3y , -7M etc.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "string",
              "description": "input shortHand string"
            }
          ],
          "return": {
            "type": "Date",
            "desc": "parsed Date value"
          }
        },
        {
          "name": "_parseDecimal",
          "description": "Parses the input string into a float after validation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input",
              "type": "string"
            }
          ],
          "return": {
            "type": "(Float | undefined)",
            "desc": "parsed float value or undefined if the input cannot be parsed."
          }
        },
        {
          "name": "_calcDate",
          "description": "Computes a date based on given parameters.\nconverts a date , 1 ,'year' to return a new Date which is date+1year.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mDate",
              "type": "Date",
              "description": "input Date"
            },
            {
              "name": "tuInput",
              "type": "string",
              "description": "variation value"
            },
            {
              "name": "type",
              "type": "string",
              "description": "variation type"
            }
          ],
          "return": {
            "type": "Date",
            "desc": "computed date"
          }
        },
        {
          "name": "_format",
          "description": "Formats the input Date and returns a formatted string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dateVal",
              "type": "Date",
              "description": "Date to format."
            }
          ],
          "return": {
            "type": "string",
            "desc": "formatted date string"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Observer on value property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "Date"
            },
            {
              "name": "oldValue",
              "type": "Date"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_displayChanged",
          "description": "Event listener for changes to input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 8
            },
            "end": {
              "line": 237,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkMinMaxValidity",
          "description": "Check for min/max validity",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 250,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Date"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 253,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "DateMixin",
      "attributes": [
        {
          "name": "value",
          "description": "Property to be binded for the value",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Date | null | undefined"
        },
        {
          "name": "format",
          "description": "String to specify the format in which the data needs to be displayed in the input.",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 16
            },
            "end": {
              "line": 43,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OECommonMixin`\nThis is the Mixin that contains functions commonly used among elements,\nThey contain Polymer legacy functions and oecloud specific functions",
      "summary": "",
      "path": "oe-common-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "_deepValue",
          "description": "Get the value from the 'obj' based on the 'path'.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "object to navigate"
            },
            {
              "name": "path",
              "type": "string",
              "description": "path for navigation"
            }
          ],
          "return": {
            "type": "Any",
            "desc": "value present in the given path of the obj."
          }
        },
        {
          "name": "debounce",
          "description": "Call `debounce` to collapse multiple requests for a named task into\none invocation which is made after the wait time has elapsed with\nno new request.  If no wait time is given, the callback will be called\nat microtask timing (guaranteed before paint).\n\n    debouncedClickAction(e) {\n      // will not call `processClick` more than once per 100ms\n      this.debounce('click', function() {\n       this.processClick();\n      } 100);\n    }",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jobName",
              "type": "string",
              "description": "String to identify the debounce job."
            },
            {
              "name": "callback",
              "type": "function (): void",
              "description": "Function that is called (with `this`\n  context) when the wait time elapses."
            },
            {
              "name": "wait",
              "type": "number",
              "description": "Optional wait time in milliseconds (ms) after the\n  last signal that must elapse before invoking `callback`"
            }
          ],
          "return": {
            "type": "!Object",
            "desc": "Returns a debouncer object on which exists the\nfollowing methods: `isActive()` returns true if the debouncer is\nactive; `cancel()` cancels the debouncer if it is active;\n`flush()` immediately invokes the debounced callback if the debouncer\nis active."
          }
        },
        {
          "name": "async",
          "description": "Runs a callback function asynchronously.\n\nBy default (if no waitTime is specified), async callbacks are run at\nmicrotask timing, which will occur before paint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "!Function",
              "description": "The callback function to run, bound to `this`."
            },
            {
              "name": "waitTime",
              "type": "number=",
              "description": "Time to wait before calling the\n  `callback`.  If unspecified or 0, the callback will be run at microtask\n  timing (before paint)."
            }
          ],
          "return": {
            "type": "number",
            "desc": "Handle that may be used to cancel the async job."
          }
        },
        {
          "name": "cancelAsync",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 8
            },
            "end": {
              "line": 99,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "handle"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "fire",
          "description": "Polymer fire function used to dispatch custom events",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 8
            },
            "end": {
              "line": 120,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "event name"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "data to be sent in the event"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "optionals options for the event {bubbles:Boolean,cancelable:Boolean,composed:Boolean,node:HTML Element}"
            }
          ],
          "return": {
            "type": "Event",
            "desc": "Custom event created based on the parameters"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 122,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "CommonMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEFieldMixin`\nThis is the Mixin that takes care of default validation of oe-ui input components",
      "summary": "",
      "path": "oe-field-mixin.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 30,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_validate",
          "description": "Override in individual elements to return element specific validity.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!boolean",
            "desc": "validity of specific element"
          }
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          }
        },
        {
          "name": "connectedCallback",
          "description": "Registers the field through event , so the parent form can save it.\nBinds the 'validationFunction' property based on its type\nAdds eventListener to input based on 'validateOnInput'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 263,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "FieldMixin",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 30,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OETemplatizeMixin`\nThis is the Mixin that provides a wrapper function for templatizing a Polymer component.",
      "summary": "",
      "path": "oe-templatize-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "__customTemplatize",
          "description": "Replaces template from dom-if,dom-repeat or dom-bind with source template.\nIf the target is not a dom-if,dom-repeat or dom-bind , creates a new templateInstance ,\nattahces a stamped node and returns the instance.\nIf the target is not provided it returns a templateInstance class",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "HTMLTemplate",
              "description": "HTML template element for dom-if/dom-bind/dom-repeat"
            },
            {
              "name": "source",
              "type": "HTMLTemplate",
              "description": "HTML template element to stamp (from lightdom)"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "options to stamp (from lightdom)"
            }
          ],
          "return": {
            "type": "(TemplateInstanceClass | HTMLTemplate)",
            "desc": "Generated class bound to the source template or stamped instance."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "TemplatizeMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OETimeMixin`\nThis is the Mixin that takes care of default validation of oe-ui input components",
      "summary": "",
      "path": "oe-time-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_pad",
          "description": "Adds padding to given number",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 47,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "num",
              "type": "number",
              "description": "number to pad"
            },
            {
              "name": "size",
              "type": "number",
              "description": "expected size of padded number"
            }
          ],
          "return": {
            "type": "string",
            "desc": "padded number string"
          }
        },
        {
          "name": "_onHourChange",
          "description": "Parses the input enetered does 24hr -> 12hr conversion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "change event on hour input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onMinuteChange",
          "description": "Parses the input entered and pads additonal zeroes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 101,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "change event on minute input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onKeyup",
          "description": "Handles up/down arrow keys on inputs",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toggleAMPM",
          "description": "Toggles AM/PM display",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hoursDisplay",
          "description": "Returns hour string after converting 24hr -> 12hr conversion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 8
            },
            "end": {
              "line": 172,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "h",
              "type": "number"
            }
          ],
          "return": {
            "type": "string",
            "desc": "padded hour value string"
          }
        },
        {
          "name": "_minutesDisplay",
          "description": "Returns minute string padded with necessary zeroes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 8
            },
            "end": {
              "line": 187,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "m",
              "type": "number"
            }
          ],
          "return": {
            "type": "string",
            "desc": "padded minute string"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 189,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "TimeMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEUtilityMixin` contains commonly used functions",
      "summary": "",
      "path": "oe-utils-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "_isEmpty",
          "description": "Checks if the list is empty list",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 30,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "list",
              "type": "Array"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_isNotEmpty",
          "description": "Checks if the list is not empty",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 8
            },
            "end": {
              "line": 39,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "list",
              "type": "Array"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "_isEqual",
          "description": "Checks if the arguments are equal",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 8
            },
            "end": {
              "line": 49,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lhs",
              "type": "Any"
            },
            {
              "name": "rhs",
              "type": "Any"
            }
          ],
          "return": {
            "type": "boolean"
          }
        },
        {
          "name": "uiurl",
          "description": "Provides a URL computed based on uibaseroute",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string"
            }
          ],
          "return": {
            "type": "string",
            "desc": "computed URL for ui component"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "UtilityMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEModelHandler` mixin is intended to perform all the model handling\nresponsibilities, like fetch, save, reset, refresh etc.\n\nOn-Attached, the behavior scans through the shadow-dom for all the elements\nhaving oe-action attribute.\n\n    <paper-button oe-action=\"save\">Save</paper-button>\n\nPossible values for oe-action are:\n    save\n    new\n    delete\n    reset\n    refresh\n    add\n    cancel\n\nFor workflow support, it also scans for elements having oe-workflow-action=\"...\" attribute\n\n    <paper-button oe-workflow-action=\"approve\">Approve</paper-button>\n    <paper-button oe-workflow-action=\"reject\">Reject</paper-button>",
      "summary": "",
      "path": "form-mixins/oe-model-handler.js",
      "properties": [
        {
          "name": "modelId",
          "type": "string | null | undefined",
          "description": "unique key/ record-id to fetch the record",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 16
            },
            "end": {
              "line": 56,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"modelIdChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "datakey",
          "type": "string | null | undefined",
          "description": "(For temporary backward compatibility) unique key/ record-id to fetch the record",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 65,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"datakeyChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "querystring",
          "type": "string | null | undefined",
          "description": "QueryString to fetch the record",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 16
            },
            "end": {
              "line": 74,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"doFetch\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "emitOnSave",
          "type": "string | null | undefined",
          "description": "Event to emit instead of doing save action",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 16
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "disableAutoFetch",
          "type": "?",
          "description": "if disableAutoFetch is true, modelHandler will not fetch the model, and caller can set model itself or set model",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 16
            },
            "end": {
              "line": 88,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "model",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 16
            },
            "end": {
              "line": 92,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "idField",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 16
            },
            "end": {
              "line": 97,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"id\""
        },
        {
          "name": "_middlewares",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 16
            },
            "end": {
              "line": 101,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "use",
          "description": "Registers a function to be invoked along with the stage name.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 8
            },
            "end": {
              "line": 173,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "when",
              "type": "string",
              "description": "Keyword for when to execute the function like 'preInsert','postUpdate',etc."
            },
            {
              "name": "fn",
              "type": "Function",
              "description": "Function to be invoked during the the execution phase speicifed in 'when'"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_executeMiddlewares",
          "description": "Executes a list of middleware functions",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 8
            },
            "end": {
              "line": 216,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "middlewares",
              "type": "Array",
              "description": "Array of functions to be invoked."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "datakeyChanged",
          "description": "Observes the 'dataKey' property. The property is deprecated and instead 'modelId' property should be used ,\nto specify the primary property of the model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 225,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_queryStringAsObject",
          "description": "Converts queryString into a object of key-value pair",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 8
            },
            "end": {
              "line": 252,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object",
            "desc": "result"
          }
        },
        {
          "name": "_getURLForFetch",
          "description": "Computes the url used for fetching data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Url used for fetching data."
          }
        },
        {
          "name": "_doFetch",
          "description": "Fetches the form data from the server",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 8
            },
            "end": {
              "line": 314,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doFetch",
          "description": "Initiates model data fetch based on restutl,modelId,etc.\nIt can also be used as an observer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 8
            },
            "end": {
              "line": 326,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "modelIdChanged",
          "description": "Listens for change of modelId and triggers fetch if the modelId is 'new' or -1.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 8
            },
            "end": {
              "line": 339,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "fetchList",
          "description": "Fetches the list data based on resturl and calls callback function with the data or undefined",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 345,
              "column": 8
            },
            "end": {
              "line": 362,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "Function"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doEvent",
          "description": "Fires specified event passing data-event-details attribute value as details",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 8
            },
            "end": {
              "line": 377,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doValidate",
          "description": "Triggers validation of the form and and resolves the Promise",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 8
            },
            "end": {
              "line": 399,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doSave",
          "description": "Triggers Submit of a form after validation fo the form.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 8
            },
            "end": {
              "line": 425,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doClear",
          "description": "Clears the model data bound by overwritting it with defaultVM data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 8
            },
            "end": {
              "line": 435,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doCopy",
          "description": "Copies the content of model by deleting the 'id' and '_version' property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 8
            },
            "end": {
              "line": 450,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_concreteUrl",
          "description": "Returns resolved url by Regexp substituion of \"version\" and \"id\".",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 8
            },
            "end": {
              "line": 464,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL string for the ajax operations"
            },
            {
              "name": "model",
              "type": "Object",
              "description": "data present in the form"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Modified URL string"
          }
        },
        {
          "name": "getUrl",
          "description": "Get Url based on the method type and model data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 472,
              "column": 8
            },
            "end": {
              "line": 506,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "string",
              "description": "method type 'get','post','put' and 'delete'."
            },
            {
              "name": "model",
              "type": "Object",
              "description": "data present in the form"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Modified URL string"
          }
        },
        {
          "name": "doSubmit",
          "description": "Submits the model data of the form based on URL provided after executing the middleWares",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 8
            },
            "end": {
              "line": 571,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doDelete",
          "description": "Deletes the model data of the form based on URL provided after executing the middleWares",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 578,
              "column": 8
            },
            "end": {
              "line": 617,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doRequest",
          "description": "Generates custom request from any button based on the attributes of button clicked.\n'oe-action-model' - model to be used for request\n'request-url' - Url to make the request\n'http-type' - HTTP type of the call\n'response-to' - Property to set the result of the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 628,
              "column": 8
            },
            "end": {
              "line": 652,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_executeWorkflowAction",
          "description": "Completes workflow tasks based on the parameters",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 660,
              "column": 8
            },
            "end": {
              "line": 693,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "processId",
              "type": "string",
              "description": "processId of the workflow task"
            },
            {
              "name": "processName",
              "type": "string",
              "description": "name of the process"
            },
            {
              "name": "processData",
              "type": "Object",
              "description": "Data of the current process"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "Attaches event listeners to the buttons present in the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 698,
              "column": 8
            },
            "end": {
              "line": 836,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 838,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "ModelHandler",
      "attributes": [
        {
          "name": "model-id",
          "description": "unique key/ record-id to fetch the record",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 16
            },
            "end": {
              "line": 56,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "datakey",
          "description": "(For temporary backward compatibility) unique key/ record-id to fetch the record",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 65,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "querystring",
          "description": "QueryString to fetch the record",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 16
            },
            "end": {
              "line": 74,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "emit-on-save",
          "description": "Event to emit instead of doing save action",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 16
            },
            "end": {
              "line": 81,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disable-auto-fetch",
          "description": "if disableAutoFetch is true, modelHandler will not fetch the model, and caller can set model itself or set model",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 16
            },
            "end": {
              "line": 88,
              "column": 17
            }
          },
          "metadata": {}
        },
        {
          "name": "model",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 16
            },
            "end": {
              "line": 92,
              "column": 17
            }
          },
          "metadata": {}
        },
        {
          "name": "id-field",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 16
            },
            "end": {
              "line": 97,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-ajax-action-completed",
          "description": "Fired when the form data custom request call is success",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-formdata-deleted",
          "description": "Fired when the form data 'DELETE' call is success",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-formdata-inserted",
          "description": "Fired when the form data 'POST' call is success",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-formdata-loaded",
          "description": "Fired when the form data is fetched from the server",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-formdata-updated",
          "description": "Fired when the form data 'PUT' call is success",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-workflow-action-completed",
          "description": "Fired when the workflow task API call succeeds",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "oe-workflow-action-failed",
          "description": "Fired when the workflow task API call fails with error",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEDraftFormMixin` mixin is intended to perform all the drafing related to draftData\nModel responsibilities, like save, load and delete.\n\nWhen 'draftId' property of the current element changes , The mixin\nLoads the respective draftData Model record and sets the current Model's instance\nand the elements properties.\n\nTo save data into draftData model 'saveDraft' function needs to be called with\n  1)componentData - key-value pair of current element's properties ex:currentStep.\n                    In case the parameter is not provided It is generated from the '_draftConfig.componentProps' property\n                    To get the properties to be saved.\n\n  2)options       - key-value pair to be saved in the draftData model used primarily for fetching the record.\n\n  3)next          - callback function to be called after data is drafted.\n\nOnce the form is submitted using modelHandler mixin's doSave or doSubmit the corresponding draftData is deleted.",
      "summary": "",
      "path": "form-mixins/oe-draft-mixin.js",
      "properties": [
        {
          "name": "draftId",
          "type": "string | null | undefined",
          "description": "Draft Id unique to this draft record",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 16
            },
            "end": {
              "line": 47,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_draftIdChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_draftConfig",
          "type": "Object | null | undefined",
          "description": "Configuration of content to be drafted",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 16
            },
            "end": {
              "line": 60,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"componentProps\":[],\"options\":{}}"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_draftIdChanged",
          "description": "When the draft Id changes loads the new data from DraftData Model",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "oldVal",
              "type": "string"
            },
            {
              "name": "newVal",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "loadDraft",
          "description": "Fetches the data from DraftData model based on draft Id",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "draft Id to fetch data"
            },
            {
              "name": "next",
              "type": "Function",
              "description": "optional callback function to be called after data is loaded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getComponentData",
          "description": "Fetches the component data to be drafted based on the _draftConfig.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object",
            "desc": "data to be drafted"
          }
        },
        {
          "name": "_getDraftOptions",
          "description": "Fetches the draft options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 133,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object",
            "desc": "draft options object"
          }
        },
        {
          "name": "saveDraft",
          "description": "Saves the draft into DraftData Model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 170,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "componentData",
              "type": "Object",
              "description": "data to be drafted"
            },
            {
              "name": "options",
              "type": "Object",
              "description": "additonal options to be drafted"
            },
            {
              "name": "next",
              "type": "Function",
              "description": "optional callback function"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deleteDraft",
          "description": "Deletes the draft data after the actual data is posted into the model.\nUsed as a middleware by the OEModelHandler Mixin.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response",
              "type": "Object"
            },
            {
              "name": "instance",
              "type": "Object"
            },
            {
              "name": "next",
              "type": "Function"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "isObjectEmpty",
          "description": "Checks if the provided argument is empty , i.e. contains no properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 8
            },
            "end": {
              "line": 201,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "Object to check"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "flag to denote that object is empty."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 0
        },
        "end": {
          "line": 203,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "DraftForm",
      "attributes": [
        {
          "name": "draft-id",
          "description": "Draft Id unique to this draft record",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 16
            },
            "end": {
              "line": 47,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEFormMessagesMixin` mixin is intended to fire predefined events on form status changes like,\nData insertion/updation/deletion and data load.",
      "summary": "",
      "path": "form-mixins/oe-form-messages-mixin.js",
      "properties": [
        {
          "name": "deleteSuccessMessage",
          "type": "string | null | undefined",
          "description": "Default message to show on delete success",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"record-deleted\""
        },
        {
          "name": "insertSuccessMessage",
          "type": "string | null | undefined",
          "description": "Default message to show on insert success",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 16
            },
            "end": {
              "line": 42,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"record-created\""
        },
        {
          "name": "updateSuccessMessage",
          "type": "string | null | undefined",
          "description": "Default message to show on update success",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 16
            },
            "end": {
              "line": 50,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"record-updated\""
        },
        {
          "name": "loadSuccessMessage",
          "type": "string | null | undefined",
          "description": "Default message to show on load success",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 16
            },
            "end": {
              "line": 58,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"record-loaded\""
        }
      ],
      "methods": [
        {
          "name": "_showInsertSuccess",
          "description": "Fires event on successfull data insert.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showUpdateSuccess",
          "description": "Fires event on successfull data update.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 82,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showDeleteSuccess",
          "description": "Fires event on successfull data delete.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showLoadSuccess",
          "description": "Fires event on successfull data load.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "FormMessages",
      "attributes": [
        {
          "name": "delete-success-message",
          "description": "Default message to show on delete success",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 16
            },
            "end": {
              "line": 34,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "insert-success-message",
          "description": "Default message to show on insert success",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 16
            },
            "end": {
              "line": 42,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "update-success-message",
          "description": "Default message to show on update success",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 16
            },
            "end": {
              "line": 50,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "load-success-message",
          "description": "Default message to show on load success",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 16
            },
            "end": {
              "line": 58,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEFormValidationMixin` mixin is used to handle validation of oe field components in the form.\nIt includes single field validation and multi field validations via oe-validators",
      "summary": "",
      "path": "form-mixins/oe-form-validation-mixin.js",
      "properties": [
        {
          "name": "fieldControls",
          "type": "Object | null | undefined",
          "description": "Maintains the  list of controls for a given model property\ne.g.\n{\n    prop1 : [ctrl1, ctrl2],\n    prop3 : [ctrl3]\n}",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 16
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "_validators",
          "type": "Array | null | undefined",
          "description": "Array of cross-field validators",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 16
            },
            "end": {
              "line": 48,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "validators",
          "type": "Object | null | undefined",
          "description": "Object hash of cross-field validators\ne.g.\n {\n   \"fieldId\" : [validators-voting-for-this-field]\n }",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 16
            },
            "end": {
              "line": 62,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "errors",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 16
            },
            "end": {
              "line": 69,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "validateForm",
          "description": "Validates each of the registered oe field components and returns a Promise",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 8
            },
            "end": {
              "line": 140,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise",
            "desc": "Promise that resolves to give {valid:Boolean,message:String,control:HTMLElement}"
          }
        },
        {
          "name": "_onOEValidate",
          "description": "Calls custom validators attached to the form component",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 8
            },
            "end": {
              "line": 187,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onRegisterField",
          "description": "Registers a oe-ui component as a field in form",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "clearFieldErrors",
          "description": "Clears the error of the components related to a fieldId",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 8
            },
            "end": {
              "line": 237,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fieldId",
              "type": "string"
            },
            {
              "name": "errType",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onRegisterValidator",
          "description": "Registers a oe validator to the form",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 265,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFieldError",
          "description": "Registers a field error inside the form",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 8
            },
            "end": {
              "line": 299,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFieldOk",
          "description": "Registers a field validation to be success to clear the related errors",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 8
            },
            "end": {
              "line": 333,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onValidatorError",
          "description": "Registers a error from oe-validators",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 8
            },
            "end": {
              "line": 375,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onValidatorOk",
          "description": "Registers a validators validation to be success to clear related errors",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearError",
          "description": "Clear the error in related controls",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 406,
              "column": 8
            },
            "end": {
              "line": 412,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "error",
              "type": "Object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showAnyOtherError",
          "description": "Displays all errors in controls",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 417,
              "column": 8
            },
            "end": {
              "line": 428,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearAllErrors",
          "description": "Clears all errors in the form",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 434,
              "column": 8
            },
            "end": {
              "line": 448,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 450,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "FormValidation",
      "attributes": [
        {
          "name": "field-controls",
          "description": "Maintains the  list of controls for a given model property\ne.g.\n{\n    prop1 : [ctrl1, ctrl2],\n    prop3 : [ctrl3]\n}",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 16
            },
            "end": {
              "line": 41,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "validators",
          "description": "Object hash of cross-field validators\ne.g.\n {\n   \"fieldId\" : [validators-voting-for-this-field]\n }",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 16
            },
            "end": {
              "line": 62,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "errors",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 16
            },
            "end": {
              "line": 69,
              "column": 17
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEAjaxMixin` provides prebuilt methods to make Ajax calls with oe-ajax component",
      "summary": "",
      "path": "oe-ajax-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "makeAjaxCall",
          "description": "Generates a oe-ajax call based on the parameter and calls the callback function with error or response.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 89,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "url to make the ajax call"
            },
            {
              "name": "method",
              "type": "string",
              "description": "method for ajax call ,'get','put','post' or 'delete'"
            },
            {
              "name": "body",
              "type": "Object",
              "description": "Content to pass as body of the call"
            },
            {
              "name": "header",
              "type": "Object",
              "description": "Headers set on the request"
            },
            {
              "name": "params",
              "type": "Object",
              "description": "Query parameters like filter etc."
            },
            {
              "name": "ajaxProps",
              "type": "Object",
              "description": "Properties to set on ajax like contentType and handleAs."
            },
            {
              "name": "cb",
              "type": "Function",
              "description": "Function called with Error and response."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "makeXhrCall",
          "description": "Generates a Vanilla JS XHR call based on the arguments",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "url to make the xhr call"
            },
            {
              "name": "method",
              "type": "string",
              "description": "method for xhr call ,'get','put','post' or 'delete'"
            },
            {
              "name": "body",
              "type": "Object",
              "description": "Content to pass as body of the call"
            },
            {
              "name": "header",
              "type": "Object",
              "description": "Headers set on the request"
            },
            {
              "name": "cb",
              "type": "Function",
              "description": "Function called with Error and response."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resolveError",
          "description": "Resolves the error from server into error message",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "err",
              "type": "Error",
              "description": "Error from server call"
            }
          ],
          "return": {
            "type": "string",
            "desc": "error message"
          }
        },
        {
          "name": "resolveErrors",
          "description": "Resolves multiple errors from server into error message",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 8
            },
            "end": {
              "line": 237,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "err",
              "type": "Error",
              "description": "Error from server call"
            }
          ],
          "return": {
            "type": "(string | Object)",
            "desc": "error message or errors array"
          }
        },
        {
          "name": "_getRestApiUrl",
          "description": "Computes valid path based on restApiRoot",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 8
            },
            "end": {
              "line": 246,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 249,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "AjaxMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OEScreenFlowMixin` mixin is intended to help in the transition/flow from one screen to another.\nIt supports both conditional as well as plain routing(transition/flow from one screen to another).",
      "summary": "",
      "path": "form-mixins/oe-screen-flow-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "_executeRule",
          "description": "This method is used to execute the bussiness rule",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ruleName",
              "type": "string",
              "description": "Name of the rule to be executed"
            },
            {
              "name": "ruleInput",
              "type": "Object",
              "description": "The payload/context with which the rule should be executed"
            },
            {
              "name": "cb",
              "type": "Function",
              "description": "callback implemented by the caller"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getState",
          "description": "This method returns a state object used for navigation to another screen.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event",
              "description": "the event for which doConditionalNavigate/doNavigate is used as an handler"
            }
          ],
          "return": {
            "desc": "state object with target as key and source as data."
          }
        },
        {
          "name": "doConditionalNavigate",
          "description": "This methods executes a bussiness rule and get backs a route/path to which the screen should navigate next, and navigates to that path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event",
              "description": "the event for which it is used as an handler"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "doNavigate",
          "description": "This method navigates to another screen with the required state object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt",
              "type": "Event",
              "description": "the event for which it is used as an handler"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 88,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "ScreenFlow",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "`OETabFormMixin` provides prebuilt methods to navigate through tabs in a template .\nTo be used along with the 'tabbed-form' or 'tabbed-draft-form' templates.",
      "summary": "",
      "path": "form-mixins/oe-tab-form-mixin.js",
      "properties": [
        {
          "name": "selectedStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 16
            },
            "end": {
              "line": 28,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_gotoFirstPage",
          "description": "Navigates to first step",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 8
            },
            "end": {
              "line": 49,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_goPrev",
          "description": "Navigates to previous step",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 58,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_goNext",
          "description": "Navigates to the next step",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeBtnText",
          "description": "Computes the text to be displayed on next/save button.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "steps",
              "type": "Array",
              "description": "array of steps"
            },
            {
              "name": "curStep",
              "type": "number",
              "description": "current step index"
            }
          ],
          "return": {
            "type": "string",
            "desc": "button text , \"save\" or \"next\"."
          }
        },
        {
          "name": "_computeBtnIcon",
          "description": "Computes the icon to be displayed on next/save button.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "steps",
              "type": "Array",
              "description": "array of steps"
            },
            {
              "name": "curStep",
              "type": "number",
              "description": "current step index"
            }
          ],
          "return": {
            "type": "string",
            "desc": "icon name \"save\" or \"chevron-right\""
          }
        },
        {
          "name": "_computeSteps",
          "description": "Computes the 'stepperSteps' to be used by oe-stepper component.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "steps",
              "type": "Array",
              "description": "steps from UIComponent entry"
            },
            {
              "name": "isVerticalLayout",
              "type": "boolean",
              "description": "flag denoting vertical layout"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "TabForm",
      "attributes": [
        {
          "name": "selected-step",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 16
            },
            "end": {
              "line": 28,
              "column": 17
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
